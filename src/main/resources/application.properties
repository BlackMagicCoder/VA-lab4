# Multi Instance setup
%primary.quarkus.http.port=8081
%secondary.quarkus.http.port=8082

# Twitter
htw.tweet.subject-filename=/names.csv

# Kafka
# Deaktiviert die von Quarkus bereitgestellten Dev-Services für Kafka, da wir einen eigenen Broker via Docker Compose verwenden.
quarkus.kafka.devservices.enabled=false
# Definiert die Adresse des Kafka-Brokers für die Anwendung.
kafka.bootstrap.servers=localhost:9092
bootstrap.servers=localhost:9092
# Veraltete Eigenschaft, wird ignoriert. Diente früher zur automatischen Erkennung von Serializern.
quarkus.reactive-messaging.kafka.serializer-autodetection.enabled=true

# Fibonacci Consumer
# Legt fest, dass der Kanal 'fibonacci-consumer' Kafka für eingehende Nachrichten nutzt.
mp.messaging.incoming.fibonacci-consumer.connector=smallrye-kafka
# Definiert das Kafka-Topic, aus dem dieser Consumer liest.
mp.messaging.incoming.fibonacci-consumer.topic=fibonacci
# Weist den Consumer einer Gruppe zu. Nachrichten werden auf alle Consumer innerhalb einer Gruppe verteilt (Job-Queue-Verhalten).
mp.messaging.incoming.fibonacci-consumer.group.id=fibonacci-group
# Klasse zur Deserialisierung des Nachrichtenschlüssels.
mp.messaging.incoming.fibonacci-consumer.key.deserializer=org.apache.kafka.common.serialization.IntegerDeserializer
# Klasse zur Deserialisierung des Nachrichtenwerts.
mp.messaging.incoming.fibonacci-consumer.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Chat Consumer
# Legt fest, dass der Kanal 'chat-consumer' Kafka für eingehende Nachrichten nutzt.
mp.messaging.incoming.chat-consumer.connector=smallrye-kafka
# Definiert das Kafka-Topic, aus dem dieser Consumer liest.
mp.messaging.incoming.chat-consumer.topic=chat
# Weist den Consumer einer Gruppe zu. Alle Instanzen mit dieser ID bilden eine Consumer-Gruppe.
mp.messaging.incoming.chat-consumer.group.id=chat-group
# Klasse zur Deserialisierung des Nachrichtenwerts (des Chatinhalts).
mp.messaging.incoming.chat-consumer.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Chat Producer
# Legt fest, dass der Kanal 'chat-producer' Kafka für ausgehende Nachrichten nutzt.
mp.messaging.outgoing.chat-producer.connector=smallrye-kafka
# Definiert das Kafka-Topic, in das dieser Producer schreibt.
mp.messaging.outgoing.chat-producer.topic=chat
# Klasse zur Serialisierung des Nachrichtenwerts (des Chatinhalts).
mp.messaging.outgoing.chat-producer.value.serializer=org.apache.kafka.common.serialization.StringSerializer
# Aktiviert die automatische Erstellung des Topics beim Anwendungsstart.
mp.messaging.outgoing.chat-producer.topic.creation.enable=true
# Legt die Anzahl der Partitionen für das automatisch erstellte Topic fest (Aufgaben-Anforderung: >= 2).
mp.messaging.outgoing.chat-producer.topic.creation.partitions=2

# Fibonacci Producer
# Legt fest, dass der Kanal 'fibonacci-producer' Kafka für ausgehende Nachrichten nutzt.
mp.messaging.outgoing.fibonacci-producer.connector=smallrye-kafka
# Definiert das Kafka-Topic, in das dieser Producer schreibt.
mp.messaging.outgoing.fibonacci-producer.topic=fibonacci
# Klasse zur Serialisierung des Nachrichtenschlüssels.
mp.messaging.outgoing.fibonacci-producer.key.serializer=org.apache.kafka.common.serialization.IntegerSerializer
# Klasse zur Serialisierung des Nachrichtenwerts.
mp.messaging.outgoing.fibonacci-producer.value.serializer=org.apache.kafka.common.serialization.StringSerializer
# Erlaubt, dass mehrere Quellen in diesen Kanal schreiben. Notwendig, da der Consumer auch in dieses Topic zurückschreibt.
mp.messaging.outgoing.fibonacci-producer.merge=true
# Aktiviert die automatische Erstellung des Topics beim Anwendungsstart, falls es noch nicht existiert.
mp.messaging.outgoing.fibonacci-producer.topic.creation.enable=true
