# Multi Instance setup
%primary.quarkus.http.port=8081
%secondary.quarkus.http.port=8082

# Twitter
htw.tweet.subject-filename=/names.csv

# Kafka
# Deaktiviert die von Quarkus bereitgestellten Dev-Services für Kafka, da wir einen eigenen Broker via Docker Compose verwenden.
quarkus.kafka.devservices.enabled=false
# Definiert die Adresse des Kafka-Brokers für die Anwendung.
kafka.bootstrap.servers=localhost:9092
bootstrap.servers=localhost:9092

# Fibonacci Consumer
# Legt fest, dass der Kanal 'fibonacci-consumer' Kafka für eingehende Nachrichten nutzt.
mp.messaging.incoming.fibonacci-consumer.connector=smallrye-kafka
# Definiert das Kafka-Topic, aus dem dieser Consumer liest.
mp.messaging.incoming.fibonacci-consumer.topic=fibonacci
# Weist den Consumer einer Gruppe zu. Nachrichten werden auf alle Consumer innerhalb einer Gruppe verteilt (Job-Queue-Verhalten).
mp.messaging.incoming.fibonacci-consumer.group.id=fibonacci-group
# Klasse zur Deserialisierung des Nachrichtenschlüssels.
mp.messaging.incoming.fibonacci-consumer.key.deserializer=org.apache.kafka.common.serialization.IntegerDeserializer
# Klasse zur Deserialisierung des Nachrichtenwerts.
mp.messaging.incoming.fibonacci-consumer.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

# — Erster Consumer (Group 1) —
mp.messaging.incoming.chat-consumer1.connector=smallrye-kafka
mp.messaging.incoming.chat-consumer1.topic=chat
mp.messaging.incoming.chat-consumer1.group.id=chat-group-1
mp.messaging.incoming.chat-consumer1.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

# — Zweiter Consumer (Group 2) —
mp.messaging.incoming.chat-consumer2.connector=smallrye-kafka
mp.messaging.incoming.chat-consumer2.topic=chat
mp.messaging.incoming.chat-consumer2.group.id=chat-group-2
mp.messaging.incoming.chat-consumer2.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Chat Producer
# Legt fest, dass der Kanal 'chat-producer' Kafka für ausgehende Nachrichten nutzt.
mp.messaging.outgoing.chat-producer.connector=smallrye-kafka
# Definiert das Kafka-Topic, in das dieser Producer schreibt.
mp.messaging.outgoing.chat-producer.topic=chat
# Klasse zur Serialisierung des Nachrichtenwerts (des Chatinhalts).
mp.messaging.outgoing.chat-producer.value.serializer=org.apache.kafka.common.serialization.StringSerializer
# Aktiviert die automatische Erstellung des Topics beim Anwendungsstart.
mp.messaging.outgoing.chat-producer.topic.creation.enable=true
# Legt die Anzahl der Partitionen für das automatisch erstellte Topic fest (Aufgaben-Anforderung: >= 2).
mp.messaging.outgoing.chat-producer.topic.creation.partitions=2
# Konfiguriert die Retention-Zeit für das Chat-Topic auf 7 Tage (604800000 ms)
mp.messaging.outgoing.chat-producer.topic.retention.ms=604800000

# Fibonacci Producer
# Legt fest, dass der Kanal 'fibonacci-producer' Kafka für ausgehende Nachrichten nutzt.
mp.messaging.outgoing.fibonacci-producer.connector=smallrye-kafka
# Definiert das Kafka-Topic, in das dieser Producer schreibt.
mp.messaging.outgoing.fibonacci-producer.topic=fibonacci
# Klasse zur Serialisierung des Nachrichtenschlüssels.
mp.messaging.outgoing.fibonacci-producer.key.serializer=org.apache.kafka.common.serialization.IntegerSerializer
# Klasse zur Serialisierung des Nachrichtenwerts.
mp.messaging.outgoing.fibonacci-producer.value.serializer=org.apache.kafka.common.serialization.StringSerializer
# Erlaubt, dass mehrere Quellen in diesen Kanal schreiben. Notwendig, da der Consumer auch in dieses Topic zurückschreibt.
mp.messaging.outgoing.fibonacci-producer.merge=true
# Aktiviert die automatische Erstellung des Topics beim Anwendungsstart, falls es noch nicht existiert.
mp.messaging.outgoing.fibonacci-producer.topic.creation.enable=true

# Kafka Topic Konfiguration für Fibonacci-Berechnung
# Anzahl der Partitionen: 1, da die Reihenfolge der Nachrichten kritisch ist für die korrekte Berechnung der Fibonacci-Folge.
# Eine einzelne Partition stellt sicher, dass alle Nachrichten in der richtigen Reihenfolge verarbeitet werden.
mp.messaging.outgoing.fibonacci-producer.partitions=1

# Anzahl der Replikate: 3, um hohe Verfügbarkeit zu gewährleisten.
# Mit 3 Replikaten kann der Ausfall von bis zu 2 Brokern kompensiert werden,
# was für Produktionsumgebungen empfohlen ist.
mp.messaging.outgoing.fibonacci-producer.topic.replication.factor=3

# Retention-Zeit: 1 Stunde (3.600.000 ms)
# Da die Fibonacci-Berechnung eine kontinuierliche Kette ist und alte Berechnungen
# nicht mehr benötigt werden, ist eine kurze Retention-Zeit ausreichend.
# Dies verhindert auch, dass das Topic unbegrenzt wächst.
mp.messaging.outgoing.fibonacci-producer.topic.retention.ms=3600000